Daniel Yang
ID: 205772799
(Problem 1)
"Actor.h"
Actor class:
I chose to define an inline doesOverlap function because all actors need to check overlap and have the same 
sprite bounds and therefore don't require a unique overlap function.
The setAlive(), getAlive(), getDamageable(), doesBlock(), and getWorld() functions are just setters and getters
for member variables of the Actor class so I chose to make a shared inline function for all actors since they
all need to check if they are alive, block movement, and if they are damageable. The getWorld() added to make
it easier for derived class methods to access StudentWorld functions.
I chose to make damage() a virtual function with the default being that the function does nothing since
not all actors are damageable but it is more convenient to still have the function for non-damageable actors
since they can be looped through without checking if the actor is damageable or not.
I chose to make doSomething() and bonk() pure virtual because all actors need those functions but they all do
something different when called.

Damageable class:
This class is a derived class of Actor since all damageable actors is a subset of all actors. I chose to redefine
the damage() function that the class inherited from Actor as a pure virtual function because all damageable
actors need to have a different reaction to being damaged but the Actor class itself doesn't need
to define those actions since only objects derived from Actor are going to be created by StudentWorld.

Fireable class:
I defined getRecharge(), setRecharge(), and decrementRecharge() as a way to control the timing for actors that
fire objects, mainly Peach and Piranha. I defined them as inline functions because they were trivial and mainly
did simple interactions with member variables. 

Peach class:
I defined doSomething(), bonk(), and damage() as member functions to differentiate the Peach object from other actors,
since Peach has unique actions to perform when these functions are called. Peach is an Actor but also damageable
so all three functions inherited from the Damageable base class, which is a derived class of Actor were defined in the
Peach class. I defined setHealth(), giveStar(), giveJump(), giveShoot(), hasStar(), hasJump(), and hasShoot() as getters
and setters for Peach's member variables that control the powers she gets and whether or not she has enough health to
continue, all of which are unique interactions not possessed by other Actors.

Other classes:
For the Block, Pipe, Flag, Mario, Flower, Mushroom, Star, Piranha_Fireball, Peach_Fireball, and Shell classes
I defined bonk() and doSomething() to define their unique behaviors that differentiate them from the rest of the
actors since they were derived from the Actor base class. For Goomba, Koopa, and Piranha, they indirectly inherited
the Actor class through the Damageable class, so I defined bonk(), doSomething(), and damage() as member functions
because bonk() and doSomething() were inherited from the Actor class and damage() from the Damageable class.
These functions were defined as member functions to define the unique behaviors of these objects that are
different from the rest of the Actors.

"StudentWorld.h"
StudentWorld class:
The init, move, and cleanup were defined here because they were required by the provided framework. I defined an
addPeach() function to initialize the peach object during the parsing of the level data. I defined the two
overloaded add() functions as templates because adding an Actor is the same regardless of type, with the only
difference being that some Actors also require a direction parameter hence the overloaded function.
I also defined an addBlock() function separate from the template add functions because the blocks are initialized
by defining the type of goodie that is stored, which is different from all the other actors which only require an
x,y coordinate and a direction for certain actors. I defined a getPeach() function so that the actors can retrieve
information or call functions of the StudentWorld's Peach object. I created a notBlocked() and notBlockedDamageable()
function so that actors can check if there is an object blocking them from moving in the case of notBlocked() and
check if they overlap with a damageable object in the case of notBlockedDamageable. Both functions have overloads
that set a reference to an Actor pointer so that the caller of the function can bonk or damage whatever object
they overlap with. I defined a bonkOverlap function so Peach could bonk all overlapping functions whether they
blocked movement, were damageable, both or neither.

(Problem 2)
I somehow managed to implement all functionality as far as I know.

(Problem 3)
It was not specified how exactly to check whether Koopa, Goomba, or Piranha were being bonked by peach so I
initially used a friend class Peach statement and made bonk private so only peach could call bonk for those
classes but I didn't know if the friend keyword was allowed. So, I changed the functions to check if the
actors were overlapping with peach and only perform the action if that was the case otherwise do nothing.
Another design decision I made was to have the add<Actor> template function in StudentWorld push_front
instead of push_back in the data structure storing the actors. This was because if koopa got damaged and the
shell was added to the end of the list, the doSomething function for the shell would see that it overlapped
with a koopa which would then call the koopa's damage function and cause an infinite loop. By storing the
newly created shell in the front, the iterator in the StudentWorld move() would not call the shell's doSomething()
in the same iteration as the koopa getting damaged.